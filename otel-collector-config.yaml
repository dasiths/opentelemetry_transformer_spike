receivers:
  otlp:
    protocols:
      grpc:
        endpoint: 0.0.0.0:4317
      http:
        endpoint: 0.0.0.0:4318
  prometheus/collector:
    config:
      scrape_configs:
        - job_name: 'opentelemetry-collector'
          static_configs:
            - targets: ['localhost:8888']

processors:
  batch:
  transform/redact_special: # This processor will redact any spans and span events with the given regex patterns
    # https://github.com/open-telemetry/opentelemetry-collector-contrib/tree/main/processor/transformprocessor
    # https://github.com/open-telemetry/opentelemetry-collector-contrib/tree/main/pkg/ottl#grammar
    error_mode: ignore
    trace_statements:
      - context: span # https://github.com/open-telemetry/opentelemetry-collector-contrib/tree/main/pkg/ottl/contexts/ottlspan
        statements:          
          # https://github.com/open-telemetry/opentelemetry-collector-contrib/tree/main/pkg/ottl/ottlfuncs#replace_all_patterns
          - replace_all_patterns(attributes, "value", "\\b\\d{3}\\s?\\d{3}\\s?\\d{3}\\b", "{redacted}")
      - context: spanevent # https://github.com/open-telemetry/opentelemetry-collector-contrib/tree/main/pkg/ottl/contexts/ottlspanevent
        statements:
          # https://github.com/open-telemetry/opentelemetry-collector-contrib/tree/main/pkg/ottl/ottlfuncs#replace_pattern
          - replace_pattern(name, "\\b\\d{3}\\s?\\d{3}\\s?\\d{3}\\b", "{redacted}")
          - replace_all_patterns(attributes, "value", "\\b\\d{3}\\s?\\d{3}\\s?\\d{3}\\b", "{redacted}")
  transform/redact_user: # This processor will redact the "user" field any spans with the name "known-span-with-sensitive-attributes"
    error_mode: ignore
    trace_statements:
      - context: span
        statements:
          - set(attributes["user"], "{redacted}") where name == "known-span-with-sensitive-attributes"
          - set(attributes["user_redacted_span"], "true") where name == "known-span-with-sensitive-attributes"

  transform/sensitize_specific_spans:
    error_mode: ignore
    trace_statements:
      - context: span
        statements:
          - set(attributes["is_sensitive"], "true") where name == "auto-instrumented-span-to-suppress"
          - set(attributes["is_sensitive"], "true") where name == "another-span-to-suppress"
          - set(attributes["is_sensitive"], "true") where name == "yet-another-span-to-suppress"

  transform/redact_sensitive_spans: 
    error_mode: ignore
    trace_statements:
      - context: span
        statements:
          - set(name, "redacted-sensitive-span") where attributes["is_sensitive"] == "true"
          - keep_keys(attributes, ["is_sensitive"]) where attributes["is_sensitive"] == "true"


  transform/inherit_span_sensitivity: 
    error_mode: ignore
    trace_statements:
      - context: spanevent
        statements:
          - set(attributes["is_sensitive"], "true") where span.attributes["is_sensitive"] == "true"
          - set(name, "redacted-sensitive-event") where attributes["is_sensitive"] == "true"
          - keep_keys(attributes, ["is_sensitive"]) where span.attributes["is_sensitive"] == "true"

  # transform/filter_pii: # This processor will filter out any spans with name "known-sensitive-span" or spans and events with the attribute "is_sensitive" set to "true"
  #   error_mode: ignore
  #   trace_statements:
  #     - context: span
  #       statements:
  #         - set(attributes["is_sensitive"], "true") where name == "known-sensitive-span"
  #         - set(name, "redacted-sensitive-span") where attributes["is_sensitive"] == "true"
  #         - keep_keys(attributes, ["is_sensitive"]) where attributes["is_sensitive"] == "true"
  #     - context: spanevent
  #       statements:
  #         - set(name, "redacted-sensitive-event") where attributes["is_sensitive"] == "true" or span.attributes["is_sensitive"] == "true"
  #         - keep_keys(attributes, ["is_sensitive"]) where attributes["is_sensitive"] == "true" or span.attributes["is_sensitive"] == "true"

exporters:
  azuremonitor:
    connection_string: ${env:APPLICATIONINSIGHTS_CONNECTION_STRING}
    spaneventsenabled: true
  otlphttp/metrics:
    endpoint: http://localhost:9090/api/v1/otlp
    tls:
      insecure: true
  otlphttp/traces:
    endpoint: http://localhost:4418
    tls:
      insecure: true
  otlphttp/logs:
    endpoint: http://localhost:3100/otlp
    tls:
      insecure: true
  debug/metrics:
    verbosity: detailed
  debug/traces:
    verbosity: detailed
  debug/logs:
    verbosity: detailed

service:
  pipelines:
    traces:
      receivers: [otlp]
      # processors: [transform/filter_pii, transform/redact_user, transform/redact_special, batch]
      processors: [transform/sensitize_specific_spans, transform/redact_sensitive_spans, transform/inherit_span_sensitivity, batch]
      exporters: [azuremonitor]
      #exporters: [otlphttp/traces,debug/traces]
    traces/2:
      receivers: [otlp]
      processors: [batch]
      exporters: [otlphttp/traces]
    metrics:
      receivers: [otlp,prometheus/collector]
      processors: [batch]
      exporters: [otlphttp/metrics]
      #exporters: [otlphttp/metrics,debug/metrics]
    logs:
      receivers: [otlp]
      processors: [batch]
      exporters: [otlphttp/logs]
      #exporters: [otlphttp/logs,debug/logs]