receivers:
  otlp:
    protocols:
      grpc:
        endpoint: 0.0.0.0:4317
      http:
        endpoint: 0.0.0.0:4318

exporters:
  debug:
    verbosity: detailed
  zipkin:
    endpoint: "http://zipkin:9411/api/v2/spans"
  otlp/jaeger:
    endpoint: "http://jaeger:4317"
    tls:
      insecure: true

processors:
  batch:
  transform/redact_special: # This processor will redact any spans and span events with the given regex patterns
    # https://github.com/open-telemetry/opentelemetry-collector-contrib/tree/main/processor/transformprocessor
    # https://github.com/open-telemetry/opentelemetry-collector-contrib/tree/main/pkg/ottl#grammar
    error_mode: ignore
    trace_statements:
      - context: span # https://github.com/open-telemetry/opentelemetry-collector-contrib/tree/main/pkg/ottl/contexts/ottlspan
        statements:          
          # https://github.com/open-telemetry/opentelemetry-collector-contrib/tree/main/pkg/ottl/ottlfuncs#replace_all_patterns
          - replace_all_patterns(attributes, "value", "\\b\\d{3}\\s?\\d{3}\\s?\\d{3}\\b", "{redacted}")
      - context: spanevent # https://github.com/open-telemetry/opentelemetry-collector-contrib/tree/main/pkg/ottl/contexts/ottlspanevent
        statements:
          # https://github.com/open-telemetry/opentelemetry-collector-contrib/tree/main/pkg/ottl/ottlfuncs#replace_pattern
          - replace_pattern(name, "\\b\\d{3}\\s?\\d{3}\\s?\\d{3}\\b", "{redacted}")
          - replace_all_patterns(attributes, "value", "\\b\\d{3}\\s?\\d{3}\\s?\\d{3}\\b", "{redacted}")
  transform/redact_user: # This processor will redact the "user" field any spans with the name "known-span-with-sensitive-attributes"
    error_mode: ignore
    trace_statements:
      - context: span
        statements:
          - set(attributes["user"], "{redacted}") where name == "known-span-with-sensitive-attributes"
          - set(attributes["user_redacted_span"], "true") where name == "known-span-with-sensitive-attributes"
  transform/filter_pii: # This processor will filter out any spans with name "sensitive-span" or spans and events with the attribute "has_pii" set to "true"
    error_mode: ignore
    trace_statements:
      - context: span
        statements:
          - set(attributes["hass_pii"], "true") where name == "known-sensitive-span"
          - set(name, "redacted-sensitive-span") where attributes["has_pii"] == "true"
          - keep_keys(attributes, ["has_pii"]) where attributes["has_pii"] == "true"
      - context: spanevent
        statements:
          - set(name, "redacted-sensitive-event") where attributes["has_pii"] == "true" or span.attributes["has_pii"] == "true"
          - keep_keys(attributes, ["has_pii"]) where attributes["has_pii"] == "true" or span.attributes["has_pii"] == "true"

extensions:
  health_check:
  pprof:
  zpages:

service:
  extensions: [pprof, zpages, health_check]
  pipelines:
    traces:
      receivers: [otlp]
      processors: [transform/filter_pii, transform/redact_user, transform/redact_special, batch]
      exporters: [zipkin]
    traces/2:
      receivers: [otlp]
      processors: [transform/redact_special, batch]
      exporters: [otlp/jaeger, debug]
    metrics:
      receivers: [otlp]
      processors: [batch]
      exporters: [debug]